###Custom Variables
postpass: "123456789"
powapass: "123456789"
route53_zoneID: "your_ZONE"
###
# Here is your stack preview
# You can make advanced changes like modifying your VM,
# installing packages, and running shell commands.

provider:
  aws:
    access_key: '${var.aws_access_key}'
    secret_key: '${var.aws_secret_key}'
resource:
  aws_instance:
    # this is the name of your VM
    citus_m:
      # select your instance_type here: eg. c3.xlarge
      instance_type: t2.medium
      # select your ami (optional) eg. ami-xxxxx (it should be based on ubuntu 14.04)
      ami: ''
      # we will tag the instance here so you can identify it when you login to your AWS console
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      # on user_data section we will write bash and configure our VM
      user_data: |-
        # user_data Script:
        export DEBIAN_FRONTEND=noninteractive
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        #Adding new source
        curl https://install.citusdata.com/community/deb.sh | bash
        #Updating packages
        apt-get update -y
        #Installing Packages
        apt-get -y install postgresql-9.5-citus sshpass
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.custom_postpass}" | chpasswd
        service ssh restart
        #Waiting for the IP file from Slaves
        while [ ! -f /var/lib/postgresql/slaveip1.t ] ;
        do
          sleep 2
        done
        while [ ! -f /var/lib/postgresql/slaveip2.t ] ;
        do
          sleep 2
        done
        while [ ! -f /var/lib/postgresql/slaveip3.t ] ;
        do
          sleep 2
        done
        #Getting Slave's IP address 
        IPVARS1=$(cat /var/lib/postgresql/slaveip1.t)
        IPVARS2=$(cat /var/lib/postgresql/slaveip2.t)
        IPVARS3=$(cat /var/lib/postgresql/slaveip3.t)
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVARS1"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVARS2"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVARS3"
        #Sending IP to all slaves
        echo "ssh $IPVARS1 'echo $IPVARS2 > /var/lib/postgresql/slaveip2.t'" >> /var/lib/postgresql/slaveip.sh
        echo "ssh $IPVARS1 'echo $IPVARS3 > /var/lib/postgresql/slaveip3.t'" >> /var/lib/postgresql/slaveip.sh
        echo "ssh $IPVARS2 'echo $IPVARS1 > /var/lib/postgresql/slaveip1.t'" >> /var/lib/postgresql/slaveip.sh
        echo "ssh $IPVARS2 'echo $IPVARS3 > /var/lib/postgresql/slaveip3.t'" >> /var/lib/postgresql/slaveip.sh
        echo "ssh $IPVARS3 'echo $IPVARS1 > /var/lib/postgresql/slaveip1.t'" >> /var/lib/postgresql/slaveip.sh
        echo "ssh $IPVARS3 'echo $IPVARS2 > /var/lib/postgresql/slaveip2.t'" >> /var/lib/postgresql/slaveip.sh
        su - postgres -c "sh /var/lib/postgresql/slaveip.sh"
        #Preload citus extension
        pg_conftool 9.5 main set shared_preload_libraries citus
        #Configuring connections
        pg_conftool 9.5 main set listen_addresses '*'
        sed -ri "91i\host    all             all             $IPVARS1/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "92i\host    all             all             $IPVARS2/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "93i\host    all             all             $IPVARS3/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        
        # start the db server
        service postgresql restart
        # and make it start automatically when computer does
        update-rc.d postgresql enable
        # add the citus extension
        sudo -i -u postgres psql -c "CREATE EXTENSION citus;"
        sudo -i -u postgres psql -c "SELECT * FROM master_add_node('$IPVARS1',5432);"
        sudo -i -u postgres psql -c "SELECT * FROM master_add_node('$IPVARS2',5432);"
        sudo -i -u postgres psql -c "SELECT * FROM master_add_node('$IPVARS3',5432);"
        service postgresql reload
        #install POWA archivist
        wget https://github.com/dalibo/powa-archivist/archive/REL_3_0_0.tar.gz -O powa-archivist-REL_3_0_0.tar.gz
        tar zxvf powa-archivist-REL_3_0_0.tar.gz
        cd powa-archivist-REL_3_0_0
        make 
        make install
        sed -ri "s\shared_preload_libraries = citus\shared_preload_libraries = 'powa,citus,pg_stat_statements'\ " /etc/postgresql/9.5/main/postgresql.conf
        sed -ri "459i\track_io_timing = on\ " /etc/postgresql/9.5/main/postgresql.conf
        apt-get install -y postgresql-server-dev-9.5 postgresql-contrib-9.5 postgresql-9.5-powa
        service postgresql restart
        echo "create database powa;" >> /var/lib/postgresql/crpowa.sql
        echo "create user powauser with password '${var.custom_powapass}';" >> /var/lib/postgresql/crpowa.sql
        echo "\\\c powa" >> /var/lib/postgresql/crpowa.sql
        echo "create extension pg_stat_statements;" >> /var/lib/postgresql/crpowa.sql
        echo "create extension btree_gist;" >> /var/lib/postgresql/crpowa.sql
        echo "create extension powa;" >> /var/lib/postgresql/crpowa.sql
        echo "grant select on all TABLES IN SCHEMA public TO powauser;" >> /var/lib/postgresql/crpowa.sql
        echo "grant select on pg_statistic TO powauser;" >> /var/lib/postgresql/crpowa.sql
        echo "grant CONNECT on DATABASE powa to powauser;" >> /var/lib/postgresql/crpowa.sql
        sudo -i -u postgres psql -f /var/lib/postgresql/crpowa.sql
        #Installing POWA-WEB
        apt-get install -y python python-pip python-psycopg2 python-sqlalchemy python-tornado apache2 libapache2-mod-wsgi
        pip install powa-web
        echo "servers={" >> /etc/powa-web.conf
        echo "  'main': {" >> /etc/powa-web.conf
        echo "    'host': 'localhost'," >> /etc/powa-web.conf
        echo "    'port': '5432'," >> /etc/powa-web.conf
        echo "    'database': 'powa'" >> /etc/powa-web.conf
        echo "  }" >> /etc/powa-web.conf
        echo "}" >> /etc/powa-web.conf
        echo "cookie_secret=\"SUPERSECRET\"" >> /etc/powa-web.conf
        sed -ri "1i\LoadModule wsgi_module modules/mod_wsgi.so\ " /etc/apache2/sites-available/000-default.conf
        sed -ri "10i\        ServerName citusdata.koding.live\ " /etc/apache2/sites-available/000-default.conf
        sed -ri "24i\        WSGIScriptAlias / /usr/local/lib/python2.7/dist-packages/powa/powa.wsgi\ " /etc/apache2/sites-available/000-default.conf
        sed -ri "25i\        Alias /static /usr/local/lib/python2.7/dist-packages/powa/static\ " /etc/apache2/sites-available/000-default.conf
        sed -ri "158i\</Directory>\ " /etc/apache2/apache2.conf
        sed -ri "158i\        Require all granted\ " /etc/apache2/apache2.conf
        sed -ri "158i\        AllowOverride None\ " /etc/apache2/apache2.conf
        sed -ri "158i\<Directory /usr/local/lib/python2.7/dist-packages/powa>\ " /etc/apache2/apache2.conf
        sed -ri "158i\\ " /etc/apache2/apache2.conf
        
        service apache2 restart
        
        echo "================================================"
        echo "Default database and monitoring tool credentials (change for production use)"
        echo " " 
        echo "PostGres Client Access (Switch to postgres user with su - postgres then use psql):"
        echo "Username: postgres"
        echo "Password: ${var.custom_postpass}"
        echo " " 
        echo "POWA Monitoring Tool Web Interface: "
        echo "http://${var.koding_user_username}.citusdata.live"
        echo "Username: powauser"
        echo "Password: ${var.custom_powapass}"
        echo "================================================"
        
    citus_s1:
      # select your instance_type here: eg. c3.xlarge
      instance_type: t2.medium
      # select your ami (optional) eg. ami-xxxxx (it should be based on ubuntu 14.04)
      ami: ''
      # we will tag the instance here so you can identify it when you login to your AWS console
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      # on user_data section we will write bash and configure our VM
      user_data: |-
        # user_data Script:
        export DEBIAN_FRONTEND=noninteractive
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        #Adding new source
        curl https://install.citusdata.com/community/deb.sh | bash
        #Updating packages
        apt-get update -y
        #Installing Packages
        apt-get -y install postgresql-9.5-citus sshpass
        #Getting master IP
        IPVAR1=${aws_instance.citus_m.private_ip}
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.custom_postpass}" | chpasswd
        service ssh restart
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        while [ $? -ne 0 ] ;
        do
          sleep 2
          su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        done
        #Creating the file with the IP and sending it to the Master
        echo "ssh $IPVAR1 'echo $IPVARL > /var/lib/postgresql/slaveip1.t'" >> /var/lib/postgresql/slaveip.sh
        su - postgres -c "sh /var/lib/postgresql/slaveip.sh"
        #Waiting for the file
        while [ ! -f /var/lib/postgresql/slaveip3.t ] ;
        do
          sleep 2
        done
        #Getting Slave's IP address 
        IPVARS2=$(cat /var/lib/postgresql/slaveip2.t)
        IPVARS3=$(cat /var/lib/postgresql/slaveip3.t)
        #Preload citus extension
        pg_conftool 9.5 main set shared_preload_libraries citus
        #Configuring connections
        pg_conftool 9.5 main set listen_addresses '*'
        sed -ri "91i\host    all             all             $IPVAR1/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "92i\host    all             all             $IPVARS2/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "93i\host    all             all             $IPVARS3/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        
        # start the db server
        service postgresql restart
        # and make it start automatically when computer does
        update-rc.d postgresql enable
        # add the citus extension
        sudo -i -u postgres psql -c "CREATE EXTENSION citus;"
        
    citus_s2:
      # select your instance_type here: eg. c3.xlarge
      instance_type: t2.medium
      # select your ami (optional) eg. ami-xxxxx (it should be based on ubuntu 14.04)
      ami: ''
      # we will tag the instance here so you can identify it when you login to your AWS console
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      # on user_data section we will write bash and configure our VM
      user_data: |-
        # user_data Script:
        export DEBIAN_FRONTEND=noninteractive
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        #Adding new source
        curl https://install.citusdata.com/community/deb.sh | bash
        #Updating packages
        apt-get update -y
        #Installing Packages
        apt-get -y install postgresql-9.5-citus sshpass
        #Getting master IP
        IPVAR1=${aws_instance.citus_m.private_ip}
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.custom_postpass}" | chpasswd
        service ssh restart
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        while [ $? -ne 0 ] ;
        do
          sleep 2
          su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        done
        #Creating the file with the IP and sending it to the Master
        echo "ssh $IPVAR1 'echo $IPVARL > /var/lib/postgresql/slaveip2.t'" >> /var/lib/postgresql/slaveip.sh
        su - postgres -c "sh /var/lib/postgresql/slaveip.sh"
        #Waiting for the file
        while [ ! -f /var/lib/postgresql/slaveip3.t ] ;
        do
          sleep 2
        done
        #Getting Slave's IP address 
        IPVARS1=$(cat /var/lib/postgresql/slaveip1.t)
        IPVARS3=$(cat /var/lib/postgresql/slaveip3.t)
        #Preload citus extension
        pg_conftool 9.5 main set shared_preload_libraries citus
        #Configuring connections
        pg_conftool 9.5 main set listen_addresses '*'
        sed -ri "91i\host    all             all             $IPVAR1/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "92i\host    all             all             $IPVARS1/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "93i\host    all             all             $IPVARS3/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        
        # start the db server
        service postgresql restart
        # and make it start automatically when computer does
        update-rc.d postgresql enable
        # add the citus extension
        sudo -i -u postgres psql -c "CREATE EXTENSION citus;"
        
    citus_s3:
      # select your instance_type here: eg. c3.xlarge
      instance_type: t2.medium
      # select your ami (optional) eg. ami-xxxxx (it should be based on ubuntu 14.04)
      ami: ''
      # we will tag the instance here so you can identify it when you login to your AWS console
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      # on user_data section we will write bash and configure our VM
      user_data: |-
        # user_data Script:
        export DEBIAN_FRONTEND=noninteractive
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        #Adding new source
        curl https://install.citusdata.com/community/deb.sh | bash
        #Updating packages
        apt-get update -y
        #Installing Packages
        apt-get -y install postgresql-9.5-citus sshpass
        #Getting master IP
        IPVAR1=${aws_instance.citus_m.private_ip}
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.custom_postpass}" | chpasswd
        service ssh restart
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        while [ $? -ne 0 ] ;
        do
          sleep 2
          su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        done
        #Creating the file with the IP and sending it to the Master
        echo "ssh $IPVAR1 'echo $IPVARL > /var/lib/postgresql/slaveip3.t'" >> /var/lib/postgresql/slaveip.sh
        su - postgres -c "sh /var/lib/postgresql/slaveip.sh"
        ##Waiting for the file
        while [ ! -f /var/lib/postgresql/slaveip2.t ] ;
        do
          sleep 2
        done
        ##Getting Slave's IP address 
        IPVARS1=$(cat /var/lib/postgresql/slaveip1.t)
        IPVARS2=$(cat /var/lib/postgresql/slaveip2.t)
        #Preload citus extension
        pg_conftool 9.5 main set shared_preload_libraries citus
        #Configuring connections
        pg_conftool 9.5 main set listen_addresses '*'
        sed -ri "91i\host    all             all             $IPVAR1/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "92i\host    all             all             $IPVARS1/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        sed -ri "93i\host    all             all             $IPVARS2/32              trust\ " /etc/postgresql/9.5/main/pg_hba.conf
        
        # start the db server
        service postgresql restart
        # and make it start automatically when computer does
        update-rc.d postgresql enable
        # add the citus extension
        sudo -i -u postgres psql -c "CREATE EXTENSION citus;"
  aws_eip:
    citusm-eip:
      instance: '${aws_instance.citus_m.id}'
      vpc: false
  aws_route53_record:
    citusdata:
      zone_id: "${var.custom_route53_zoneID}"
      name: "${var.koding_user_username}.citusdata.live"
      type: "A"
      ttl: "60"
      records: ["${aws_eip.citusm-eip.public_ip}"]
      

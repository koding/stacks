# This stack script installs PostgreSQL in as 2 node cluster: master and slave
# also sets a DB replication between nodes

koding:
  userInput:
    postpass: password
    
provider:
  aws:
    access_key: '${var.aws_access_key}'
    secret_key: '${var.aws_secret_key}'
resource:
  aws_instance:
    master:
      instance_type: t2.medium
      ami: ''
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      user_data: |-
        set -e
        export DEBIAN_FRONTEND=noninteractive
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        
        apt-get update -y
        apt-get -y install postgresql postgresql-contrib postgresql-client sshpass
        
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.userInput_postpass}" | chpasswd
        service ssh restart
        
        #Waiting for the IP file from Slave
        while [ ! -f /var/lib/postgresql/slaveip.t ] ;
        do
          sleep 2
        done
        
        #Getting Slave's IP address 
        IPVARS=$(cat /var/lib/postgresql/slaveip.t)
        
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.userInput_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVARS"
        
        #Master Node Configuration
        su - postgres -c "psql -c \"CREATE USER rep REPLICATION LOGIN CONNECTION LIMIT 1 ENCRYPTED PASSWORD '${var.userInput_postpass}';\""
        sed -ri "97i\host     replication     rep           $IPVARS/32         md5\ " /etc/postgresql/9.3/main/pg_hba.conf
        sed -ri "59i\listen_addresses = 'localhost,$IPVARL'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "159i\wal_level = 'hot_standby'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "188i\archive_mode = on\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "190i\archive_command = 'cd .'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "206i\max_wal_senders = 1\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "224i\hot_standby = on\ " /etc/postgresql/9.3/main/postgresql.conf
        service postgresql restart
        
        #Setting Replication
        su - postgres -c "psql -c \"select pg_start_backup('initial_backup');\""
        su - postgres -c "rsync -cva --inplace --exclude=*pg_xlog* /var/lib/postgresql/9.3/main/ $IPVARS:/var/lib/postgresql/9.3/main/"
        su - postgres -c "psql -c \"select pg_stop_backup();\""
        
    slave:
      instance_type: t2.medium
      ami: ''
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      user_data: |-
        # user_data Script:
        set -e
        export DEBIAN_FRONTEND=noninteractive
        
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        
        #Getting IP from the Master
        IPVAR1=${aws_instance.master.private_ip}
        
        apt-get update -y
        apt-get -y install postgresql postgresql-contrib postgresql-client sshpass
        
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.userInput_postpass}" | chpasswd
        service ssh restart
        
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.userInput_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        
        #Creating the file with the IP and sending it to the Master
        echo "ssh $IPVAR1 'echo $IPVARL > /var/lib/postgresql/slaveip.t'" >> /var/lib/postgresql/slaveip.sh
        su - postgres -c "sh /var/lib/postgresql/slaveip.sh"
        
        #Slave Node Configuration
        service postgresql stop
        sed -ri "97i\host     replication     rep           $IPVAR1/32         md5\ " /etc/postgresql/9.3/main/pg_hba.conf
        sed -ri "59i\listen_addresses = 'localhost,$IPVARL'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "159i\wal_level = 'hot_standby'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "188i\archive_mode = on\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "190i\archive_command = 'cd .'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "206i\max_wal_senders = 1\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "224i\hot_standby = on\ " /etc/postgresql/9.3/main/postgresql.conf
        
        #Initial replication from the Master
        echo "standby_mode = 'on'" >>/var/lib/postgresql/9.3/main/recovery.conf
        echo "primary_conninfo = 'host=$IPVAR1 port=5432 user=rep password=${var.userInput_postpass}'" >>/var/lib/postgresql/9.3/main/recovery.conf
        echo "trigger_file = '/tmp/postgresql.trigger.5432'" >>/var/lib/postgresql/9.3/main/recovery.conf
       
        #Time Waiting for the master before starting the DB service
        sleep 10
        service postgresql start
        
  aws_eip:
    master-eip:
      instance: '${aws_instance.master.id}'
      vpc: false

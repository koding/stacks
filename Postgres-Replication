#===Custom Variables
# You can define your custom variables, and use them in your stack template.
# These variables will not be visible to your non-admins.
#
# This is a YAML file, you can define a key-value pair like this here;
#
#   foo: bar
#
# and you can use that variable in your stack template as below;
#
#   ${var.custom_foo}
postpass: "123456789"

#===STACK
# Here is your stack preview
# You can make advanced changes like modifying your VM,
# installing packages, and running shell commands.

provider:
  aws:
    access_key: '${var.aws_access_key}'
    secret_key: '${var.aws_secret_key}'
resource:
  
  aws_instance:
    # this is the name of your VM
    master:
      # select your instance_type here: eg. c3.xlarge
      instance_type: t2.medium
      #private_ip: 10.0.225.159
      # select your ami (optional) eg. ami-xxxxx (it should be based on ubuntu 14.04)
      ami: ''
      # we will tag the instance here so you can identify it when you login to your AWS console
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      # on user_data section we will write bash and configure our VM
      user_data: |-
        # user_data Script:
        set -e
        export DEBIAN_FRONTEND=noninteractive
        #Adding new source
        #apt-key adv --keyserver pgp.mit.edu --recv-keys 5072E1F5
        DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
        CODENAME=$(lsb_release -cs)
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        #Updating packages
        apt-get update -y
        #Installing Packages
        apt-get -y install postgresql postgresql-contrib postgresql-client sshpass
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.custom_postpass}" | chpasswd
        service ssh restart
        #Waiting for the IP file from Slave
        while [ ! -f /var/lib/postgresql/slaveip.t ] ;
        do
          sleep 5
        done
        #Getting Slave's IP address 
        IPVARS=$(cat /var/lib/postgresql/slaveip.t)
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVARS"
        #Master Node Configuration
        su - postgres -c "psql -c \"CREATE USER rep REPLICATION LOGIN CONNECTION LIMIT 1 ENCRYPTED PASSWORD '${var.custom_postpass}';\""
        sed -ri "97i\host     replication     rep           $IPVARS/32         md5\ " /etc/postgresql/9.3/main/pg_hba.conf
        sed -ri "59i\listen_addresses = 'localhost,$IPVARL'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "159i\wal_level = 'hot_standby'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "188i\archive_mode = on\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "190i\archive_command = 'cd .'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "206i\max_wal_senders = 1\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "224i\hot_standby = on\ " /etc/postgresql/9.3/main/postgresql.conf
        service postgresql restart
        #Setting Replication
        su - postgres -c "psql -c \"select pg_start_backup('initial_backup');\""
        su - postgres -c "rsync -cva --inplace --exclude=*pg_xlog* /var/lib/postgresql/9.3/main/ $IPVARS:/var/lib/postgresql/9.3/main/"
        su - postgres -c "psql -c \"select pg_stop_backup();\""

    slave:
      # select your instance_type here: eg. c3.xlarge
      instance_type: t2.medium
      #private_ip: 10.0.225.158
      # select your ami (optional) eg. ami-xxxxx (it should be based on ubuntu 14.04)
      ami: ''
      # we will tag the instance here so you can identify it when you login to your AWS console
      tags:
        Name: '${var.koding_user_username}-${var.koding_group_slug}'
      # on user_data section we will write bash and configure our VM
      user_data: |-
        # user_data Script:
        set -e
        export DEBIAN_FRONTEND=noninteractive
        #Adding new source
        #apt-key adv --keyserver pgp.mit.edu --recv-keys 5072E1F5
        DISTRO=$(lsb_release -is | tr '[:upper:]' '[:lower:]')
        CODENAME=$(lsb_release -cs)
        #Getting user name and IP
        export KODING_USER=${var.koding_user_username}
        IPVARP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
        IPVARL=`ip addr | grep -Po '(?!(inet 127.\d.\d.1))(inet \K(\d{1,3}\.){3}\d{1,3})'`
        #Getting IP from the Master
        IPVAR1=${aws_instance.master.private_ip}
        #Updating packages
        apt-get update -y
        #Installing Packages
        apt-get -y install postgresql postgresql-contrib postgresql-client sshpass
        #SSH Configuration
        sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
        echo "postgres:${var.custom_postpass}" | chpasswd
        service ssh restart
        #Setting up SSH connection between servers
        su - postgres -c "echo | echo | echo | ssh-keygen"
        su - postgres -c "sshpass -p \"${var.custom_postpass}\" ssh-copy-id -o \"StrictHostKeyChecking no\" $IPVAR1"
        #Creating the file with the IP and sending it to the Master
        echo "ssh $IPVAR1 'echo $IPVARL > /var/lib/postgresql/slaveip.t'" >> /var/lib/postgresql/slaveip.sh
        su - postgres -c "sh /var/lib/postgresql/slaveip.sh"
        #Slave Node Configuration
        service postgresql stop
        sed -ri "97i\host     replication     rep           $IPVAR1/32         md5\ " /etc/postgresql/9.3/main/pg_hba.conf
        sed -ri "59i\listen_addresses = 'localhost,$IPVARL'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "159i\wal_level = 'hot_standby'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "188i\archive_mode = on\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "190i\archive_command = 'cd .'\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "206i\max_wal_senders = 1\ " /etc/postgresql/9.3/main/postgresql.conf
        sed -ri "224i\hot_standby = on\ " /etc/postgresql/9.3/main/postgresql.conf
        #Initial replication from the Master
        echo "standby_mode = 'on'" >>/var/lib/postgresql/9.3/main/recovery.conf
        echo "primary_conninfo = 'host=$IPVAR1 port=5432 user=rep password=${var.custom_postpass}'" >>/var/lib/postgresql/9.3/main/recovery.conf
        echo "trigger_file = '/tmp/postgresql.trigger.5432'" >>/var/lib/postgresql/9.3/main/recovery.conf
        #Time before to start the DB service
        sleep 10
        service postgresql start
